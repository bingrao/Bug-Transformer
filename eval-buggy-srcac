public void create() { stage = new Stage(0, 0, false); font = new BitmapFont(); input.setInputProcessor(stage); container = new Container(null, 0, 0); stage.addActor(container); Container table = new Container(null, 0, 0); FlickScrollPane scroll = new FlickScrollPane(null, stage, table, 0, 0); container.add(scroll).expand(true, true).fill(true, true); table.layout.parse("pad:10<seq2seq4repair_space>*<seq2seq4repair_space>expand:x<seq2seq4repair_space>space:4"); for (int i = 0; i < 100; i++) {  table.row();    table.add(new Label(null, (i + "uno"), new com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle(font, Color.RED)));    table.add(new Label(null, (i + "dos"), new com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle(font, Color.RED)));  table.add(new Label(null, (i + "tres<seq2seq4repair_space>long0<seq2seq4repair_space>long1<seq2seq4repair_space>long2<seq2seq4repair_space>long3<seq2seq4repair_space>long4<seq2seq4repair_space>long5<seq2seq4repair_space>long6<seq2seq4repair_space>long7<seq2seq4repair_space>long8<seq2seq4repair_space>long9"), new com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle(font, Color.RED))); } container.row(); container.add(new Label(null, "stuff<seq2seq4repair_space>at<seq2seq4repair_space>bottom!", new com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle(font, Color.WHITE))).pad(20, 20, 20, 20);}
public static BuildTarget newDefaultTarget(BuildTarget.TargetOs type, boolean is64Bit) { if ((type == (BuildTarget.TargetOs.Windows)) && (!is64Bit)) {    return new BuildTarget(BuildTarget.TargetOs.Windows, false, new String[] { "***.cpp" }, new String[0], new String[0], "i686-w64-mingw32-", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-mfpmath=sse<seq2seq4repair_space>-msse2<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-m32", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-mfpmath=sse<seq2seq4repair_space>-msse2<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-m32", "-Wl,--kill-at<seq2seq4repair_space>-shared<seq2seq4repair_space>-m32");   } if ((type == (BuildTarget.TargetOs.Windows)) && is64Bit) {  return new BuildTarget(BuildTarget.TargetOs.Windows, true, new String[] { "***.cpp" }, new String[0], new String[0], "x86_64-w64-mingw32-", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-mfpmath=sse<seq2seq4repair_space>-msse2<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-m64", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-mfpmath=sse<seq2seq4repair_space>-msse2<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-m64", "-Wl,--kill-at<seq2seq4repair_space>-shared<seq2seq4repair_space>-static-libgcc<seq2seq4repair_space>-static-libstdc++<seq2seq4repair_space>-m64"); } if ((type == (BuildTarget.TargetOs.Linux)) && (!is64Bit)) {  return new BuildTarget(BuildTarget.TargetOs.Linux, false, new String[] { "***.cpp" }, new String[0], new String[0], "", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-mfpmath=sse<seq2seq4repair_space>-msse<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-m32<seq2seq4repair_space>-fPIC", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-mfpmath=sse<seq2seq4repair_space>-msse<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-m32<seq2seq4repair_space>-fPIC", "-shared<seq2seq4repair_space>-m32"); } if ((type == (BuildTarget.TargetOs.Linux)) && is64Bit) {  return new BuildTarget(BuildTarget.TargetOs.Linux, true, new String[] { "***.cpp" }, new String[0], new String[0], "", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-mfpmath=sse<seq2seq4repair_space>-msse<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-m64<seq2seq4repair_space>-fPIC", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-mfpmath=sse<seq2seq4repair_space>-msse<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-m64<seq2seq4repair_space>-fPIC", "-shared<seq2seq4repair_space>-m64"); } if (type == (BuildTarget.TargetOs.MacOsX)) {  BuildTarget mac = new BuildTarget(BuildTarget.TargetOs.MacOsX, false, new String[] { "***.cpp" }, new String[0], new String[0], "", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-arch<seq2seq4repair_space>i386<seq2seq4repair_space>-arch<seq2seq4repair_space>x86_64<seq2seq4repair_space>-DFIXED_POINT<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-fPIC<seq2seq4repair_space>-mmacosx-version-min=10.5", "-c<seq2seq4repair_space>-Wall<seq2seq4repair_space>-O2<seq2seq4repair_space>-arch<seq2seq4repair_space>i386<seq2seq4repair_space>-arch<seq2seq4repair_space>x86_64<seq2seq4repair_space>-DFIXED_POINT<seq2seq4repair_space>-fmessage-length=0<seq2seq4repair_space>-fPIC<seq2seq4repair_space>-mmacosx-version-min=10.5", "-shared<seq2seq4repair_space>-arch<seq2seq4repair_space>i386<seq2seq4repair_space>-arch<seq2seq4repair_space>x86_64<seq2seq4repair_space>-mmacosx-version-min=10.5");  return mac; } if (type == (BuildTarget.TargetOs.Android)) {  BuildTarget android = new BuildTarget(BuildTarget.TargetOs.Android, false, new String[] { "***.cpp" }, new String[0], new String[0], "", "-O2<seq2seq4repair_space>-Wall<seq2seq4repair_space>-D__ANDROID__", "-O2<seq2seq4repair_space>-Wall<seq2seq4repair_space>-D__ANDROID__", "-lm");  return android; } throw new RuntimeException("Unknown<seq2seq4repair_space>target<seq2seq4repair_space>type");}